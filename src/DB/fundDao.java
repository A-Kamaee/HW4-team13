package DB;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import DB.fund;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FUND.
*/
public class fundDao extends AbstractDao<fund, Long> {

    public static final String TABLENAME = "FUND";

    /**
     * Properties of entity fund.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Rooz = new Property(1, String.class, "rooz", false, "ROOZ");
        public final static Property Jari = new Property(2, String.class, "jari", false, "JARI");
        public final static Property Daramad = new Property(3, String.class, "daramad", false, "DARAMAD");
    };


    public fundDao(DaoConfig config) {
        super(config);
    }
    
    public fundDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FUND' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ROOZ' TEXT," + // 1: rooz
                "'JARI' TEXT," + // 2: jari
                "'DARAMAD' TEXT);"); // 3: daramad
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FUND'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, fund entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String rooz = entity.getRooz();
        if (rooz != null) {
            stmt.bindString(2, rooz);
        }
 
        String jari = entity.getJari();
        if (jari != null) {
            stmt.bindString(3, jari);
        }
 
        String daramad = entity.getDaramad();
        if (daramad != null) {
            stmt.bindString(4, daramad);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public fund readEntity(Cursor cursor, int offset) {
        fund entity = new fund( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // rooz
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // jari
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // daramad
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, fund entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRooz(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setJari(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDaramad(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(fund entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(fund entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
